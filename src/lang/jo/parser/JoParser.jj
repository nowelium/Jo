/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./JoParser.jj */
/*@egen*/// \u30aa\u30d7\u30b7\u30e7\u30f3\u5b9a\u7fa9
options {
    JDK_VERSION = "1.5";
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = true;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    //* <boolean: true> \u30e1\u30bd\u30c3\u30c9\u3092\u3059\u3079\u3066static\u306b\u3059\u308b
    STATIC = false;                                                                                                                       
    //* <String> LOOKAHEAD\u306e\u898f\u5b9a\u5024
    // LOOKAHEAD
    //
    USER_CHAR_STREAM = false;
    //
    USER_TOKEN_MANAGER = false;
    //* <boolean> \u751f\u6210\u3057\u305f\u30d1\u30fc\u30b5\u30fc\u304cUNICODE\u3067\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3088\u3046\u306b\u3059\u308b
    UNICODE_INPUT = true;
    //
    JAVA_UNICODE_ESCAPE = false;
    //* <boolean: true> SimpleNode\u53ca\u3073\u6587\u6cd5\u4e2d\u3067\u4f7f\u7528\u3055\u308c\u308b\u305d\u306e\u4ed6\u306e\u30ce\u30fc\u30c9\u306e\u30b5\u30f3\u30d7\u30eb\u5b9f\u88c5\u3092\u751f\u6210\u3057\u307e\u3059
    // BUILD_NODE_FILES
    //* <boolean: false> \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u533a\u5225\u3092\u3057\u306a\u3044
    IGNORE_CASE = false
    //* <boolean: false> \u7279\u306b\u6307\u5b9a\u306e\u306a\u3044\u5834\u5408\u3001\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b
    // NODE_DEFAULT_VOID\u3000= false;
    //
    BUILD_PARSER = true;
    //
    BUILD_TOKEN_MANAGER = true;
    //
    SANITY_CHECK = true;
    //
    FORCE_LA_CHECK = true;
    //
    CHOICE_AMBIGUITY_CHECK = true;
    //
    OTHER_AMBIGUITY_CHECK = true;
    //* <boolean: false> Token\u767a\u898b\u6642\u306b void CommonTokenAction(Token token) \u304c\u547c\u3073\u51fa\u3055\u308c\u308b
    COMMON_TOKEN_ACTION = true;
    //* <boolean: false> jjtGetFirstToken(), jjtSetFirstToken(), getLastToken(), and jjtSetLastToken() \u3092SimpleNode\u306b\u8ffd\u52a0\u3059\u308b
    // TRACK_TOKENS = true;
    //* <String: "Object"> Visitor\u306e\u5f15\u6570\u3067\u4f7f\u7528\u3055\u308c\u308b\u578b 
    // VISITOR_DATA_TYPE = "JoContext";
    //* <String: "Object"> Visitor\u306e\u623b\u308a\u578b
    // VISITOR_RETURN_TYPE = "JoContext";
    //* <String: ""> JJTree\u306e\u51fa\u529b\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002
    //JJTREE_OUTPUT_DIRECTORY = "node/jjt";
}

// \u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9
PARSER_BEGIN(JoParser)
package lang.jo.parser;
import lang.jo.parser.node.QuoteType;
public class JoParser/*@bgen(jjtree)*/implements JoParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJoParserState jjtree = new JJTJoParserState();

/*@egen*/
    public void jjtreeOpenNodeScope(Node node) {
    }
    public void jjtreeCloseNodeScope(Node node) {
    }
}
PARSER_END(JoParser)

TOKEN_MGR_DECLS: {
    void CommonTokenAction(Token t) {
    }
}

/*
 * SKIP:\u3000\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u306f\u6368\u3066\u3089\u308c\u308b\u3002
 * MORE:\u3000\u30de\u30c3\u30c1\u64cd\u4f5c\u306f\u7d99\u7d9a\u3055\u308c\u308b\u3002\u3053\u3053\u3067\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u3068\u4ee5\u5f8c\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u304c\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308b\u3002
 * TOKEN:\u3000\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u3067\u30c8\u30fc\u30af\u30f3\u3092\u5f62\u6210\u3057\u3066\u8fd4\u3059\u3002
 * SPECIAL_TOKEN:\u3000\u30b9\u30da\u30b7\u30e3\u30eb\u30c8\u30fc\u30af\u30f3\u3092\u4f5c\u308b\u304c\u3001\u305d\u308c\u306f\u8fd4\u3055\u306a\u3044\u3002\u305d\u306e\u6b21\u306b\u30de\u30c3\u30c1\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306especialToken\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002
 */
/* operators */
TOKEN: {
    < OPERATOR:
        <ASSIGN>
        | <DOT>
        | <COLON>
        | <TILDE>
        | <BANG>
        | <HOOK>
        | <ATMARK>
        | <DLR>
        | <REM>
        | <XOR>
        | <BIT_AND>
        | <BIT_OR>
        | <BACKSLASH>
        | <STAR>
        | <MINUS>
        | <PLUS>
        | <SLASH>
        | <GT>
        | <LT>
    >
    | < #ASSIGN: "=" >
    | < #GT: ">" >
    | < #LT: "<" >
    | < #BANG: "!" >
    | < #HOOK: "?" >
    | < #TILDE: "~" >
    | < #PLUS: "+" >
    | < #MINUS: "-" >
    | < #STAR: "*" >
    | < #SLASH: "/" >
    | < #BACKSLASH: "\\">
    | < #BIT_AND: "&" >
    | < #BIT_OR: "|" >
    | < #XOR: "^" >
    | < #REM: "%" >
    | < #ATMARK: "@" >
    | < #DLR: "$" >
    | < #SEMICOLON: ";" >
    | < #COLON: ":" >
    | < #DOT: "." >
}

/* spans */
TOKEN: {
    < TERMINATOR:        (<SEPERATOR>)? <SEMICOLON>  | <NEWLINE> | <NEWLINE> (<SEPERATOR>)?    >
}
SPECIAL_TOKEN: {
    < SEPERATOR: " "  | "\t" | "\f" >
}
SPECIAL_TOKEN: {
    < WHITESPACE: " " | "\t" | "\n" | "\r" | "\f" >
}
TOKEN: {
    < SCTPAD: <SEPERATOR> | <COMMENT> | <TERMINATOR> >
}
TOKEN: {
    < SCPAD: <SEPERATOR> | <COMMENT> >
}
TOKEN: {
    < WCPAD: <WHITESPACE> | <COMMENT> >
}
TOKEN: {
    < NEWLINE: "\r\n"|"\n"|"\r" >
}
TOKEN: {
    < COMMA: "," >
}

/* identifier */
TOKEN: {
    < IDENTIFIER: (<COLON>)? <LETTER> (<LETTER> | <NUMBER> | <SPECIALCHAR>)+ >
    | < #LETTER: ["$","A"-"Z","_","a"-"z"] >
    | < #SPECIALCHAR: [":", ".", "-"] >
}

/* numbers */
TOKEN: {
    < NUMBER: <HEXNUMBER> | <DECIMAL> | <OCTET> | <FLOAT> >
}
TOKEN: {
    < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
    | < DECIMAL: ["1"-"9"] (["0"-"9"])* | "0" >
    | < OCTET: "0" (["0"-"7"])* >
    | < FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT> >
    | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

/* comments */
TOKEN: {
    < COMMENT: <SINGLE_LINE_COMMENT> | <MULTI_LINE_COMMENT> >
}
TOKEN: {
    <SINGLE_LINE_COMMENT: ("//"|"#") (~["\n","\r"])*>
    | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}
/* quotes */
TOKEN: {
    < BACKQUOTES: <BACK_QUOTE> (<B_WITH_STRING>)* <BACK_QUOTE> >
    | < SINGLEQUOTES: <SINGLE_QUOTE>  (<S_WITH_STRING>)* <SINGLE_QUOTE> >
    | < DOUBLEQUOTES: <DOUBLE_QUOTE> (<D_WITH_STRING>)* <DOUBLE_QUOTE> >
    | < TRIQUOTES: <TRI_QUOTE> (<T_WITH_STRING>)* <TRI_QUOTE> >
    | < #BACK_QUOTE: "`" >
    | < #SINGLE_QUOTE: "'" >
    | < #DOUBLE_QUOTE: "\"" >
    | < #TRI_QUOTE: "\"\"\"" >
    | < #B_WITH_STRING: ~["`"] | <NOT_MULTI_LINE> | <ESCAPE_SEQUENCE> >
    | < #S_WITH_STRING: ~["'"] | <NOT_MULTI_LINE> | <ESCAPE_SEQUENCE> >
    | < #D_WITH_STRING: ~["\""] | <NOT_MULTI_LINE> | <ESCAPE_SEQUENCE> >
    | < #T_WITH_STRING: ~["\"", "'", "`"] | <ESCAPE_SEQUENCE> >
    | < #NOT_MULTI_LINE: ~["\\", "\n", "\r"] >
    | < #ESCAPE_SEQUENCE: "\\" ["n", "t", "b", "r", "f", "\\", "'", "\"", "`"] >
}

/* characters */
TOKEN: {
    < OPEN: <LPAREN> | <LBRACE> | <LBRACKET> >
    | < #LPAREN: "(" >
    | < #LBRACE: "{" >
    | < #LBRACKET: "[" >
}

TOKEN: {
    < CLOSE: <RPAREN> | <RBRACE> | <RBRACKET> >
    | < #RPAREN: ")" >
    | < #RBRACE: "}" >
    | < #RBRACKET: "]" >
}

TOKEN: {
    < ANYTHING_ELSE: (~[]) >
}

// \u6587\u6cd5\u306e\u5b9a\u7fa9
Node Expression():
{/*@bgen(jjtree) Expression */
  JoNodeExpression jjtn000 = (JoNodeExpression)JoNodeExpression.jjtCreate(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    (
    LOOKAHEAD(Message()) (Message())+/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                        jjtreeCloseNodeScope(jjtn000);
                                      }
/*@egen*/ {
        return jjtn000;
    }
    | <SCTPAD>
    | <EOF>
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

Node Message():
{/*@bgen(jjtree) Message */
  JoNodeMessage jjtn000 = (JoNodeMessage)JoNodeMessage.jjtCreate(this, JJTMESSAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Message */
    try {
/*@egen*/
    (<WCPAD>)* Symbol() (<SCPAD>)* (Arguments())*/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtreeCloseNodeScope(jjtn000);
                                                  }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Arguments()       :
{}
{
    <OPEN>
    (Argument() (<COMMA> Argument())*)*
    <CLOSE>
}

Node Argument() :
{/*@bgen(jjtree) Argument */
  JoNodeArgument jjtn000 = (JoNodeArgument)JoNodeArgument.jjtCreate(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    (<WCPAD>)*
    Expression() 
    (<WCPAD>)*/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtreeCloseNodeScope(jjtn000);
               }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Symbol()       :
{}
{
    Number()
    | Identifier()
    | Operator()
    | Quote()
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  JoNodeIdentifier jjtn000 = (JoNodeIdentifier)JoNodeIdentifier.jjtCreate(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    token = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtreeCloseNodeScope(jjtn000);
                         }
/*@egen*/ {
        jjtn000.setNodeValue(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Number() :
{/*@bgen(jjtree) Number */
  JoNodeNumber jjtn000 = (JoNodeNumber)JoNodeNumber.jjtCreate(this, JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    token = <NUMBER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtreeCloseNodeScope(jjtn000);
                     }
/*@egen*/ {
        jjtn000.setNodeValue(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Operator() :
{/*@bgen(jjtree) Operator */
  JoNodeOperator jjtn000 = (JoNodeOperator)JoNodeOperator.jjtCreate(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) Operator */
    try {
/*@egen*/
    token = <OPERATOR>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtreeCloseNodeScope(jjtn000);
                       }
/*@egen*/ {
        jjtn000.setNodeValue(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Quote() :
{/*@bgen(jjtree) Quote */
  JoNodeQuote jjtn000 = (JoNodeQuote)JoNodeQuote.jjtCreate(this, JJTQUOTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) Quote */
    try {
/*@egen*/
    token = <BACKQUOTES>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtreeCloseNodeScope(jjtn000);
                         }
/*@egen*/ {{
            jjtn000.setToken(token);
            String tokenImage = token.image;
            jjtn000.setNodeValue(tokenImage.substring(1, tokenImage.length() - 1));
            jjtn000.setNodeType(QuoteType.BackQuote);
    }}
    | token = <SINGLEQUOTES>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                             }
/*@egen*/ {{
            jjtn000.setToken(token);
            String tokenImage = token.image;
            jjtn000.setNodeValue(tokenImage.substring(1, tokenImage.length() - 1));
            jjtn000.setNodeType(QuoteType.SingleQuote);
    }}
    | token = <DOUBLEQUOTES>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                             }
/*@egen*/ {{
            jjtn000.setToken(token);
            String tokenImage = token.image;
            jjtn000.setNodeValue(tokenImage.substring(1, tokenImage.length() - 1));
            jjtn000.setNodeType(QuoteType.DoubleQuote);
    }}
    | token = <TRIQUOTES>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtreeCloseNodeScope(jjtn000);
                          }
/*@egen*/ {{
            jjtn000.setToken(token);
            String tokenImage = token.image;
            jjtn000.setNodeValue(tokenImage.substring(3, tokenImage.length() - 3));
            jjtn000.setNodeType(QuoteType.TriQuote);
    }}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}